import * as Notifications from 'expo-notifications'

Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldPlaySound: true,
    shouldSetBadge: true,
    shouldShowBanner: true,
    shouldShowList: true,
  }),
})

export async function scheduleLocalNotification() {
  await Notifications.scheduleNotificationAsync({
    content: {
      title: '–õ–æ–∫–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ! üì¨',
      body: '–≠—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ —Å–∞–º–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.',
      data: { key: 'value', screen: 'some-screen-id' },
    },
    trigger: null,
  })
}

export async function sendPushTokenToServer(token: string) {
  try {
    const response = await fetch(
      'https://your-backend.com/api/register-push-token',
      {
        // –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –ê–î–†–ï–° –í–ê–®–ï–ì–û –ë–≠–ö–ï–ù–î–ê
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          // 'Authorization': `Bearer ${yourAuthToken}` // –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        },
        body: JSON.stringify({ pushToken: token, userId: 'some-user-id' }), // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      },
    )
    if (!response.ok) {
      console.error(
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:',
        response.status,
        await response.text(),
      )
    } else {
      console.log('–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä.')
    }
  } catch (error) {
    console.error('–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', error)
  }
}
